"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[5204],{44714:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"NeoEdge NG4500 Series/Quick Start","title":"Quick Start","description":"Overview","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/1-NeoEdge NG4500 Series/1-Quick Start.md","sourceDirName":"1-NeoEdge NG4500 Series","slug":"/NeoEdge NG4500 Series/Quick Start","permalink":"/wiki-documents/docs/NeoEdge NG4500 Series/Quick Start","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/wiki-documents/docs/NeoEdge NG4500 Series/Overview"},"next":{"title":"Dev Guide","permalink":"/wiki-documents/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Dev Guide"}}');var i=t(74848),s=t(28453);const a={},l="Quick Start",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Hardware-related",id:"hardware-related",level:2},{value:"Software-related",id:"software-related",level:2},{value:"Initial System Startup Configuration",id:"initial-system-startup-configuration",level:2},{value:"1. User Configuration",id:"1-user-configuration",level:3},{value:"2. System Status &amp; Version Confirmation",id:"2-system-status--version-confirmation",level:3},{value:"Model Deployment",id:"model-deployment",level:2},{value:"Hardware Requirements",id:"hardware-requirements",level:3},{value:"Software Environment",id:"software-environment",level:3},{value:"Environment Preparation",id:"environment-preparation",level:3},{value:"Running Example",id:"running-example",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"This chapter provides a quick guide to using the NG4500 series products."}),"\n",(0,i.jsx)(n.h2,{id:"hardware-related",children:"Hardware-related"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u200b",(0,i.jsx)(n.strong,{children:"\u200bHardware Overview\u200b"}),"\u200b: For details, refer to the ",(0,i.jsx)(n.a,{href:"NG4500-CB01%20Development%20Board/Hardware%20Guide/Components%20Overview",children:"Hardware Component Description"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u200b",(0,i.jsx)(n.strong,{children:"\u200bDevice Assembly\u200b"}),"\u200b: For instructions, see the ",(0,i.jsx)(n.a,{href:"NG4500-CB01%20Development%20Board/Hardware%20Guide/Hardware%20Connection",children:"Hardware Connection Guide"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"software-related",children:"Software-related"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u200b",(0,i.jsx)(n.strong,{children:"\u200bEnvironment Setup\u200b"}),"\u200b: For setting up the software development environment, refer to ",(0,i.jsx)(n.a,{href:"NG4500-CB01%20Development%20Board/Software%20Guide/Development%20Environment%20Setup",children:"Development Environment Setup"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["\u200b",(0,i.jsx)(n.strong,{children:"\u200bFirmware Flashing\u200b"}),"\u200b: For detailed steps on firmware flashing, see ",(0,i.jsx)(n.a,{href:"NG4500-CB01%20Development%20Board/Software%20Guide/System%20Flashing%20and%20Initialization",children:"System Firmware Flashing and Initialization"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"initial-system-startup-configuration",children:"Initial System Startup Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Refer to the above content, complete the hardware connection, power to NG4500, according to the following prompts to complete the system's first initial configuration."}),"\n",(0,i.jsx)(n.h3,{id:"1-user-configuration",children:"1. User Configuration"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Check ",(0,i.jsx)(n.code,{children:"accept license"})," and continue."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(40411).A+"",width:"961",height:"636"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Set the language and continue."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(23005).A+"",width:"880",height:"672"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Configure the keyboard layout and continue."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(56940).A+"",width:"807",height:"620"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["Set the timezone (e.g., ",(0,i.jsx)(n.code,{children:"Asia/Shanghai"}),") and continue."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(75994).A+"",width:"849",height:"637"})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:"Configure 'Your name' and 'password', then continue."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"System Configuration",src:t(94410).A+"",width:"1920",height:"1081"})}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsx)(n.li,{children:"Finally, wait for the system installation to complete and restart automatically."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-system-status--version-confirmation",children:"2. System Status & Version Confirmation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use the \u200b",(0,i.jsx)(n.strong,{children:"\u200bJtop\u200b"}),"\u200b tool to monitor system resources:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"# Install Jtop\r\nsudo apt update\r\nsudo apt install python3-pip\r\nsudo pip3 install -U jetson-stats\r\n\r\n# Restart the service\r\nsudo systemctl restart jtop.service\r\n\r\n# Run Jtop\r\nsudo jtop\n"})}),"\n",(0,i.jsx)(n.p,{children:"This will display real-time resource usage, including CPU, memory, GPU, disk, and fan status.And confirm the current system is installed TensorRT, CUDA version."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(74901).A+"",width:"1589",height:"891"})}),"\n",(0,i.jsx)(n.h2,{id:"model-deployment",children:"Model Deployment"}),"\n",(0,i.jsx)(n.p,{children:"The following will introduce how to deploy and run the NanoOWL real - time visual inference model on the AIBOX. Taking NG4511 as an example, an imx219 camera is used."}),"\n",(0,i.jsx)(n.h3,{id:"hardware-requirements",children:"Hardware Requirements"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Requirement"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Device"}),(0,i.jsx)(n.td,{children:"Jetson Orin\uff08Nano / NX / AGX\uff09"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Memory"}),(0,i.jsx)(n.td,{children:"\u2265 8GB (Larger models require more memory)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Storage Space"}),(0,i.jsx)(n.td,{children:"\u2265 10GB (Depending on the model size)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GPU"}),(0,i.jsx)(n.td,{children:"NVIDIA GPU supporting CUDA"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"software-environment",children:"Software Environment"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u200b\u200b",(0,i.jsx)(n.strong,{children:"\u200bJetPack Version\u200b"}),"\u200b\uff1a","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"JetPack 5 (L4T r35.x)"}),"\n",(0,i.jsx)(n.li,{children:"JetPack 6 (L4T r36.x) (Default version of the system)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"environment-preparation",children:"Environment Preparation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Hardware connection: Connect the IMX219 camera (Note: The metal contacts should face upwards)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(84721).A+"",width:"1197",height:"636"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Install dependencies"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt update\r\nsudo apt-get install -y docker.io\r\nsudo apt-get install -y nvidia-container-toolkit\r\nsudo apt-get install nvidia-jetpack\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Install jetson - containers"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"# Get the source code\r\ngit clone https://github.com/dusty-nv/jetson-containers\r\n\r\n# Install dependencies\r\nbash jetson-containers/install.sh\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Start the deployment and automatically pull/build the nanoowl container. (Note: After obtaining the container, the container will be started)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd jetson-containers/\r\njetson-containers run --workdir /opt/nanoowl $(autotag nanoowl)\n"})}),"\n",(0,i.jsx)(n.p,{children:"This command will automatically detect your hardware configuration and pull or build the appropriate container image."}),"\n",(0,i.jsx)(n.h3,{id:"running-example",children:"Running Example"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Check the camera device"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"ls /dev/video*\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Run the nanoowl container and complete the following configurations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Start the docker and enter the test case path"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd jetson-containers/\r\njetson-containers run --workdir /opt/nanoowl $(autotag nanoowl)\r\n\r\n# Enter the test case path\r\ncd /opt/nanoowl/examples/tree_demo\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Install dependencies"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"apt update\r\napt-get install vim\r\npip install aiohttp\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Modify the\xa0",(0,i.jsx)(n.code,{children:"/opt/nanoowl/examples/tree_demo"}),"\xa0file"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'# Comment out the following line of code\r\ncamera = cv2.VideoCapture(CAMERA_DEVICE)\r\n\r\n# Replace it with the following content\r\ngst_pipeline = (\r\n    "nvarguscamerasrc ! "\r\n    "video/x-raw(memory:NVMM), width=(int)1280, height=(int)720, format=(string)NV12, framerate=(fraction)30/1 ! "\r\n    "nvvidconv ! "\r\n    "video/x-raw, format=(string)BGRx ! "\r\n    "videoconvert ! "\r\n    "video/x-raw, format=(string)BGR ! "\r\n    "appsink"\r\n)\r\ncamera = cv2.VideoCapture(gst_pipeline, cv2.CAP_GSTREAMER)\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Start the terminal and run the test case"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"python3 tree_demo.py --camera 0 --resolution 1920x1080 ../../data/owl_image_encoder_patch32.engine\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Results"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Open the browser and enter the IP address of the current NG4511 device, such as\xa0",(0,i.jsx)(n.code,{children:"http://<ip address>:7860"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Enter any content you want to recognize, such as","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[a face [a nose, an eye, a mouth]]"}),"\n",(0,i.jsx)(n.li,{children:"[a table [a keyboard, a pen, a mouse]]"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(94144).A+"",width:"1209",height:"869"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},74901:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/NG45XX_JTOP-ef09f207983c08654b7e854210400594.png"},94144:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/NG45XX_Quickstart_NanoOWL-ab641bfc4deba2badd249bd82de39dac.png"},94410:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/NG45XX_System_Configuration-4a97aab5ca5197abf98ba54d19c46dab.jpg"},56940:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/NG45XX_System_Configuration_Keyboard-7d3e25edc55398312c9e595fba2031ef.png"},23005:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/NG45XX_System_Configuration_Language-ac6643fb6e44fd7da6992d06c93aa95c.png"},40411:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/NG45XX_System_Configuration_Licenses-40f90c4573a98b0072517443eca6a897.png"},75994:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/NG45XX_System_Configuration_Local-9a14a382cc7b89c421a80199b3460bef.png"},84721:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/NG45XX_IMX219-028db30ad99023127ece3d626bb10ebc.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);