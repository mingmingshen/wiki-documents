"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[884],{86888:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Development Environment Setup","title":"Development Environment Setup","description":"This chapter details the\xa0setup of the Jetson Orin NX development environment, covering the complete process from\xa0local development environment configuration\xa0to\xa0remote debugging and desktop access, aiming to help developers efficiently build a development system suitable for embedded AI edge computing devices.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/1-NeoEdge NG4500 Series/2-NG4500-CB01 Development Board/2-Software Guide/1-Development Environment Setup.md","sourceDirName":"1-NeoEdge NG4500 Series/2-NG4500-CB01 Development Board/2-Software Guide","slug":"/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Development Environment Setup","permalink":"/wiki-documents/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Development Environment Setup","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"System  Flashing","permalink":"/wiki-documents/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/System Flashing and Initialization"},"next":{"title":"Interface","permalink":"/wiki-documents/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Driver Installation and Updates/Interface&modules configure"}}');var t=s(74848),l=s(28453);const i={},o="Development Environment Setup",c={},d=[{value:"1. Local Source Code Development Environment Setup",id:"1-local-source-code-development-environment-setup",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Source Code Deployment",id:"source-code-deployment",level:3},{value:"Cross-Compilation Toolchain Deployment",id:"cross-compilation-toolchain-deployment",level:3},{value:"Compilation Methods",id:"compilation-methods",level:3},{value:"Updating the Kernel and Device Tree (Without Flashing)",id:"updating-the-kernel-and-device-tree-without-flashing",level:3},{value:"2. Remote Debugging Methods",id:"2-remote-debugging-methods",level:2},{value:"Prerequisites",id:"prerequisites-1",level:3},{value:"SSH Access",id:"ssh-access",level:3},{value:"RDP Remote Desktop Access",id:"rdp-remote-desktop-access",level:3},{value:"References",id:"references",level:4}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"development-environment-setup",children:"Development Environment Setup"})}),"\n",(0,t.jsxs)(n.p,{children:["This chapter details the\xa0",(0,t.jsx)(n.strong,{children:"setup of the Jetson Orin NX development environment"}),", covering the complete process from\xa0",(0,t.jsx)(n.strong,{children:"local development environment configuration"}),"\xa0to\xa0",(0,t.jsx)(n.strong,{children:"remote debugging and desktop access"}),", aiming to help developers efficiently build a development system suitable for embedded AI edge computing devices."]}),"\n",(0,t.jsx)(n.h2,{id:"1-local-source-code-development-environment-setup",children:"1. Local Source Code Development Environment Setup"}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Ubuntu host (recommended: 20.04/22.04 LTS, >100GB space, for cross-compilation)"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Install necessary tools as follows:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo apt update  \r\nsudo apt install git-core build-essential bc flex bison libssl-dev  \n"})}),"\n",(0,t.jsx)(n.h3,{id:"source-code-deployment",children:"Source Code Deployment"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Download and extract the Linux_for_Tegra source code:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"wget https://developer.nvidia.com/downloads/embedded/l4t/r36_release_v4.0/release/Jetson_Linux_R36.4.0_aarch64.tbz2  \r\ntar xf Jetson_Linux_R36.4.0_aarch64.tbz2  \n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Download and extract the filesystem:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"wget https://developer.nvidia.com/downloads/embedded/l4t/r36_release_v4.0/release/Tegra_Linux_Sample-Root-Filesystem_R36.4.0_aarch64.tbz2  \r\nsudo tar xpf Tegra_Linux_Sample-Root-Filesystem_R36.4.0_aarch64.tbz2 -C Linux_for_Tegra/rootfs/  \n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Pull the kernel source code:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra/source/  \r\n./source_sync.sh -t jetson_36.4  \n"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Fetch the following code and overwrite the original source:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd ../..  \r\nmkdir -p gitlab/Linux_for_Tegra  \r\ngit clone git@gitlab.milesight.com:ai-developer/aibox/l4t.git gitlab/Linux_for_Tegra  \r\ncp -r gitlab/Linux_for_Tegra/* Linux_for_Tegra/  \n"})}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsx)(n.li,{children:"Deploy NVIDIA Tegra components:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra  \r\nsudo ./apply_binaries.sh  \n"})}),"\n",(0,t.jsx)(n.h3,{id:"cross-compilation-toolchain-deployment",children:"Cross-Compilation Toolchain Deployment"}),"\n",(0,t.jsx)(n.p,{children:"Download and extract the cross-compilation toolchain:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"wget https://developer.nvidia.com/downloads/embedded/l4t/r36_release_v3.0/toolchain/aarch64--glibc--stable-2022.08-1.tar.bz2  \r\nmkdir -p $HOME/l4t-gcc  \r\ntar xf aarch64--glibc--stable-2022.08-1.tar.bz2 -C $HOME/l4t-gcc  \n"})}),"\n",(0,t.jsx)(n.h3,{id:"compilation-methods",children:"Compilation Methods"}),"\n",(0,t.jsx)(n.p,{children:"Before compiling, configure the environment variables (required for each new terminal session):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra/source  \r\nexport CROSS_COMPILE=$HOME/l4t-gcc/aarch64--glibc--stable-2022.08-1/bin/aarch64-buildroot-linux-gnu-  \r\nexport KERNEL_HEADERS=$PWD/kernel/kernel-jammy-src  \r\nexport INSTALL_MOD_PATH=$PWD/Linux_for_Tegra/rootfs/  \n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Full Compilation (includes kernel, modules, and device tree):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"./nvbuild.sh \n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Partial Compilation Methods:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Compile the kernel:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra/source  \r\n./nvbuild.sh -o $PWD/kernel_output  \n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Compile Out-of-Tree Modules:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra/source  \r\nmake modules  \r\n\r\n# Install module drivers into rootfs  \r\nsudo -E make modules_install  \n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Compile the device tree:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra/source  \r\nmake dtbs  \n"})}),"\n",(0,t.jsx)(n.h3,{id:"updating-the-kernel-and-device-tree-without-flashing",children:"Updating the Kernel and Device Tree (Without Flashing)"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Check the\xa0",(0,t.jsx)(n.code,{children:"/boot/extlinux/extlinux.conf"}),"\xa0file to confirm the paths of the current IMAGE and DTB (see LINUX and FDT entries in the example below):"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"TIMEOUT 30  \r\nDEFAULT primary  \r\n\r\nMENU TITLE L4T boot options  \r\n\r\nLABEL primary  \r\n      MENU LABEL primary kernel  \r\n      LINUX /boot/Image  \r\n      FDT /boot/dtb/kernel_tegra234-NG45XX-p3768-0000+p3767-0003-nv-super.dtb  \r\n      INITRD /boot/initrd  \r\n      APPEND ${cbootargs} root=PARTUUID=756c2935-3ec5-487a-96c8-424f306ca235 rw rootwait rootfstype=ext4 mminit_loglevel=4 console=ttyTCU0,115200 firmware_class.path=/etc/firmware fbcon=map:0 nospectre_bhb video=efifb:off console=tty0  \r\n      OVERLAYS /boot/tegra234-p3767-camera-p3768-imx678-C.dtbo  \n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Back up the original kernel image:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo cp /boot/Image /boot/Image.backup  \r\nsudo cp /boot/dtb/kernel_tegra234-NG45XX-p3768-0000+p3767-0003-nv-super.dtb /boot/dtb/kernel_tegra234-NG45XX-p3768-0000+p3767-0003-nv-super.dtb.backup  \n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["Use\xa0",(0,t.jsx)(n.code,{children:"scp"}),"\xa0to copy the newly compiled IMAGE and DTB to the paths above:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo cp $HOME/Image /boot/Image.backup  \r\nsudo cp $HOME/kernel_tegra234-NG45XX-p3768-0000+p3767-0003-nv-super.dtb /boot/dtb/kernel_tegra234-NG45XX-p3768-0000+p3767-0003-nv-super.dtb  \n"})}),"\n",(0,t.jsx)(n.h2,{id:"2-remote-debugging-methods",children:"2. Remote Debugging Methods"}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites-1",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Complete the AIBOX network configuration as follows:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Click the\xa0",(0,t.jsx)(n.strong,{children:"Ethernet"}),"\xa0icon in the top-right corner \u2192 Select\xa0",(0,t.jsx)(n.strong,{children:'"Wired Settings"'}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(94976).A+"",width:"616",height:"481"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"In the network settings window, select the current wired connection."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click the\xa0",(0,t.jsx)(n.code,{children:"gear"}),"\xa0icon for detailed settings:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Under the\xa0",(0,t.jsx)(n.code,{children:"IPv4"}),"\xa0tab, select\xa0",(0,t.jsx)(n.code,{children:"Manual"}),"\xa0configuration."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Enter the static IP address, subnet mask, and gateway. For example:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Address"}),":\xa0",(0,t.jsx)(n.code,{children:"192.168.231.100"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Netmask"}),":\xa0",(0,t.jsx)(n.code,{children:"255.255.255.0"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Gateway"}),":\xa0",(0,t.jsx)(n.code,{children:"192.168.231.1"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In the DNS section, enter DNS server addresses (e.g.,\xa0",(0,t.jsx)(n.code,{children:"8.8.8.8"}),"\xa0and\xa0",(0,t.jsx)(n.code,{children:"8.8.4.4"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click\xa0",(0,t.jsx)(n.code,{children:"Apply"}),"\xa0to save the settings."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(44315).A+"",width:"1665",height:"1122"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Restart the network to apply the new settings."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Network Verification"})}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsx)(n.li,{children:"Open a terminal and verify connectivity with:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell"})}),"\n",(0,t.jsx)(n.h3,{id:"ssh-access",children:"SSH Access"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["On a Windows PC, press\xa0",(0,t.jsx)(n.code,{children:"Win + R"}),'\xa0to open the "Run" dialog.']}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Enter\xa0",(0,t.jsx)(n.code,{children:"powershell"}),"\xa0and press\xa0",(0,t.jsx)(n.strong,{children:"Enter"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Connect to the AIBOX via SSH:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# Connect to AIBOX  \r\nssh username@aibox-ip  \r\n# Execute remote commands  \r\nssh username@aibox-ip "uname -a"  \n'})}),"\n",(0,t.jsx)(n.h3,{id:"rdp-remote-desktop-access",children:"RDP Remote Desktop Access"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Start the JETSON terminal and install the following:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo apt update\r\nsudo apt-get install tightvncserver xrdp \r\nsudo systemctl enable xrdp  \r\nsudo systemctl start xrdp\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:'Then, on Windows, start "Remote Desktop Connection" and enter the IP address of the JETSON.'}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["\xa0\xa0\xa0\xa0",(0,t.jsx)(n.img,{alt:"Remote_Desktop_IP",src:s(12160).A+"",width:"602",height:"380"})]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'Click "Connect" and enter the username and password.'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Remote_Desktop_Login",src:s(24708).A+"",width:"349",height:"431"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If you see the screen below, it indicates a successful connection.\r\n",(0,t.jsx)(n.img,{alt:"Remote_Desktop",src:s(9686).A+"",width:"1897",height:"1097"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"references",children:"References"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.nvidia.com/jetson/archives/r36.2/DeveloperGuide/SD/Kernel/KernelCustomization.html",children:"Kernel Customization \u2014 NVIDIA Jetson Linux Developer Guide 1 documentation"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},94976:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/NG45XX_Setting-e49654253f9155f6aac7af399865196f.png"},44315:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/NG45XX_Setting_Network-1a60a90feceefc71e938c769c4bfbae8.png"},9686:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/Remote_Desktop-db54096867afd84907e6038d3b36953c.png"},12160:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/Remote_Desktop_IP-0be1081440d06897dab5525dd4c9cf6a.png"},24708:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/Remote_Desktop_Login-7c48ab8888b0755dca1cb9b5f9afcb81.png"},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(96540);const t={},l=r.createContext(t);function i(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);